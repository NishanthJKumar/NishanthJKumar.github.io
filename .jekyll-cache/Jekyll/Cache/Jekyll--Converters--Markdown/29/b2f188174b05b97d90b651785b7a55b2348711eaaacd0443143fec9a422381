I"∆{<p>Computer Science has become quite the popular field these days, <a href="https://cra.org/wp-content/uploads/2017/02/Generation-CS.pdf">especially amongst undergraduates</a>. As a result, there are a <em>lot</em> more CS-related resources now than there ever were before. There are tons of books, lecture videos, guides, articles, and even memes about everything from understanding difficult CS concepts for coursework, to ‚Äòcracking‚Äô technical interviews, to applying to CS grad school. However, one aspect of an undergrad CS education that often gets left a bit in the dark is research [1]. While most University undergrads are probably aware that undergrad research opportunities exist, a surprising amount don‚Äôt <em>really</em> know (1) what undergrad research entails, (2) why they should care/potentially try to get involved, and (3) how to actually get a research opportunity. This is unfortunate because there‚Äôs been an overwhelming recent interest from students in going to CS graduate school or pursuing research-related jobs in industry, which both increasingly require at least <em>some</em> undergrad research experience.</p>

<p>In my own case, at the start of my freshman year, I had a pretty good idea of what coursework I‚Äôd need to do to get a CS degree, and quickly found out the why and how of recruiting for various summer internships. However, I knew next-to-nothing about undergrad research. I didn‚Äôt know - for instance - that most Professors‚Äô primary responsibility is to do research, that being a ‚Äúresearcher‚Äù is a legitimate career option, or that research experience is important for grad school applications. Fortunately for me, I stumbled into some incredible undergrad research opportunities by happy accident. Research changed my life; I loved (and still love!) it so much that I spent my senior year working to <a href="http://ur.cs.brown.edu/about/">promote undergrad research opportunities within Brown‚Äôs CS department</a> so that more students get to take advantage of the opportunities I‚Äôd gotten. One of the most common things I heard from students and peers is that they wished they had known more about research and gotten involved sooner. This post is an attempt to address that, as well as share some lessons by trying to answer three common, big-picture questions about undergrad research: what, why and how?</p>

<!-- vscode-markdown-toc -->
<p><strong>Table of Contents</strong></p>

<ul>
  <li><a href="#WhattheheckisUndergradCSResearch">What the heck is Undergrad CS Research?</a></li>
  <li><a href="#WhyshouldIcare">Why should I care?</a></li>
  <li><a href="#HowshouldIgetinvolved">How should I get involved?</a></li>
  <li><a href="#Sometipsandadvice">Some tips and advice</a>
    <ul>
      <li><a href="#SomeDosandDontsofUndergradResearch">Some Do‚Äôs and Dont‚Äôs of Undergrad Research</a></li>
      <li><a href="#SomeImportantThingstoKeepinMind">Some Important Things to Keep in Mind</a></li>
    </ul>
  </li>
</ul>

<!-- vscode-markdown-toc-config
	numbering=true
	autoSave=true
	/vscode-markdown-toc-config -->
<!-- /vscode-markdown-toc -->

<h2 id="1-what-the-heck-is-undergrad-cs-research">1. <a name="WhattheheckisUndergradCSResearch"></a>What the heck is Undergrad CS Research?</h2>
<p>CS research basically involves trying to push the boundaries of CS as a field and discover new knowledge about computers. If that sounds like a vague, fairly generic description, that‚Äôs because it is. One of the cool things about CS research is that it is really broad and hard to draw a precise box around. There are researchers working on everything from <a href="https://www.nature.com/articles/d41586-020-03348-4">AI to predict protein folding</a> to <a href="https://www.cs.virginia.edu/~robins/The_Limits_of_Quantum_Computers.pdf">proving things quantum computers won‚Äôt be able to do</a>. Pretty much every cool CS-related invention - from Object-Oriented Programming to web search and the protocols of the Internet - started out as projects in a research lab.</p>

<p>This is all well and good, but it says nothing about what <em>undergrad</em> CS research involves? What does an undergrad researcher do on a daily basis? The answer is that, just like the content of CS research itself, it varies. However, there is some general structure in what to expect.</p>

<p>If you join a lab as an undergrad, you‚Äôll probably be mentored by a grad-student (generally, someone working towards their PhD) or post-doc (someone who‚Äôs finished their PhD) directly, with occasional meetings with one or more Professors. You‚Äôll get to work on a project that‚Äôs directly related to one of the lab‚Äôs research directions in a very specific sub-field of CS. Especially in the beginning, you‚Äôll likely spend a good amount of time reading academic papers and getting yourself acquainted with the lab‚Äôs work (which can take anywhere from a week to a few months). You may also be asked to work on a ‚Äústarter project‚Äù, like implementing an existing paper or solving a problem-set from a related class, to get you up to speed and give you a taste of the kind of work you‚Äôll be doing [2].</p>

<p>Soon enough, you‚Äôll probably be tasked with working on some relatively well scoped-out part of an existing project. Most of the time, this means designing/implementing some code as part of a larger codebase, or implementing a novel algorithm someone on the project has come up with, or designing and running one or more experiments. More rarely (but common with theoretical CS research), you‚Äôll be asked to help prove a theorem or do something else that‚Äôs rather math-heavy like derive the worst-case runtime of a new algorithm. Eventually, you might be asked to help write up the part you worked on as part of an academic paper. What‚Äôs common between these different tasks is that they‚Äôre usually fairly concrete: someone‚Äôs sketched out what needs to be done in broad strokes and your job is to figure out all the details of actually doing it. In this way, these aspects of research are not unlike what a traditional software engineer does.</p>

<p>After working on a few projects, you‚Äôll probably have the opportunity to lead your own project, which will pretty-much simulate what being a grad student or professional researcher would be like. Unlike before, this will involve much less concrete things, like finding an interesting problem to work on and designing a completely novel solution for it. On a day-to-day basis, this will likely involve reading lots of papers (a core activity for a researcher at any stage of their career!), having research-related discussions with your mentors/advisors/collaborators and spending a significant amount of time just thinking. These aspects of research are rather significantly different from software engineering because there are no descriptions of what you need to produce, and it could very well be that <em>no one</em> has done something similar enough before, so you‚Äôre not even really sure where to get started or what sort of tools/frameworks to use. Generally, if you find that you enjoy these rather unstructured, less-concrete parts of research, then it‚Äôs a pretty strong sign that you‚Äôll enjoy being a researcher.</p>

<p>Aside from these technical aspects of actually doing your research, you‚Äôll also likely spend time communicating your research by giving talks or poster presentations and attending conferences. However, these commitments are generally few and far between for undergrads when compared to the other aspects of research.</p>

<h2 id="2-why-should-i-care">2. <a name="WhyshouldIcare"></a>Why should I care?</h2>
<p>From the above description of CS research, hopefully it‚Äôs clear that research offers you the opportunity to (a) pursue an interest in a sub-topic of CS, and (b) learn a lot of interesting/useful skills/knowledge. This is great, but there are also so many other things - like working on a side-project, trying to start a startup, or doing web-dev for that cool new club - that you could do to reap similar benefits. Given this, here are a few benefits that are rather unique to doing research:</p>

<ol>
  <li>
    <p><strong>This is (probably) the best chance you‚Äôll get to try it</strong></p>

    <p>Believe it or not, it‚Äôs exceptionally difficult to get involved with research if you‚Äôre not at a University. I‚Äôve met quite a few people who became interested in research <em>after</em> graduation and their number one regret is that they didn‚Äôt take advantage of research opportunities while they were still doing their degree programs. In fact, gaining research experience is one of the most-common reasons that people decide to pursue Master‚Äôs degrees. Given that it‚Äôll probably never be as easy to get involved with research as it is for you right now, you should probably at least give it a try.</p>
  </li>
  <li>
    <p><strong>You‚Äôll figure out if you want to be a researcher or not</strong></p>

    <p>It‚Äôs possible to split all CS-related career paths you could possibly choose to pursue into 2 categories: research (becoming a research scientist, research engineer, professor, etc.) and not-research (software engineering, product management, consulting, tech entrepreneurship, etc.). The general rule I‚Äôve been told by internship mentors, grad students and Professors is that it is much easier to switch from research to not-research than the other way around. Given this, and the point above, it‚Äôs incredibly useful to know if a research career is appealing to you or not. There‚Äôs no better way to figure this out for yourself than to get involved with research and seeing if you like it.</p>
  </li>
  <li>
    <p><strong>You‚Äôll <em>massively</em> strengthen grad-school applications (should you choose to apply)</strong></p>

    <p>Gaining research experience is probably the single best thing you can do to strengthen a grad school application (especially for PhD programs!) [3]. So if you‚Äôre at all considering going to grad school, getting involved with research is a very good thing to do. If you‚Äôre not sure about grad school (like most people are), then it‚Äôs still useful to get some research experience because it leaves that door open for you to decide later. It‚Äôs much better to have the experience and decide not to apply to grad school than to not have the experience and want to apply. Additionally, as mentioned above, doing undergrad research will essentially simulate what a PhD program program will be like, which is useful in deciding whether or not you‚Äôd even like to apply to grad school in the first place.</p>
  </li>
  <li>
    <p><strong>You‚Äôll get to form strong relationships with a Professor</strong></p>

    <p>Professors are generally extremely cool, intelligent and experienced people who can (and want to) be incredible mentors to your career and life. They can give you valuable advice on everything from what classes to take to how to think about what kind of person you want to be. They can also open doors to cool opportunities (internships, grad-schools, etc.) with strong letters of recommendation and/or connecting you with people they know in academia and industry (and most CS Professors know <em>a lot</em> of interesting people!). In my own case, my undergrad research advisors are the best mentors I‚Äôve had so far, and their advice changed my life and career trajectory; so I‚Äôd definitely <em>highly</em> recommend getting to know your Professors better. While you <em>could</em> do this through other avenues (TA‚Äôing, going to a lot of their office hours, etc.) there‚Äôs nothing as direct as doing research with them.</p>
  </li>
  <li>
    <p><strong>You‚Äôll strengthen job/internship applications</strong></p>

    <p>Research projects - especially ones that are  relevant to roles you might be looking for - are appealing to potential employers. This is especially true if you‚Äôre interested in research-adjacent roles (e.g. ‚Äúresearch intern‚Äù, ‚Äúresearch engineer‚Äù, ‚Äúmachine learning engineer‚Äù, etc.). What‚Äôs more, letters of recommendation from a professor can open up opportunities that might not be otherwise available (both the industry internships I did during my undergrad years were roles that I was only able to interview for on recommendation from a Professor). Having said this, I want to make clear that doing research is <em>rarely</em> the best use of your time if getting an industry internship/job is your primary goal; you‚Äôd be better off spending time on interview prep, side-projects, open-source contributions, etc.).</p>
  </li>
</ol>

<h2 id="3-how-should-i-get-involved">3. <a name="HowshouldIgetinvolved"></a>How should I get involved?</h2>
<p>Hopefully at this point, you‚Äôre considering trying out this research thing for yourself. So how exactly do you go about getting involved? Fortunately, there are a lot of great existing articles and resources on this. Some posts I‚Äôve found particularly helpful are <a href="https://medium.com/@researchconnectcu/cornell-cs-research-readme-381206eaabcb">this one from Cornell CS</a> and <a href="https://cs.unc.edu/academics/undergraduate/how-to-undergraduate-research/">this one from UNC Chapel Hill</a>. While these articles include some school-specific information, the general process is roughly the same at any institution. Spend some time searching for information specific to your department and the various labs within it (if you happen to be a Brown student, check out <a href="http://ur.cs.brown.edu/">this website</a> and get in touch with the <a href="http://ur.cs.brown.edu/about/">MURA‚Äôs</a>!). If you can‚Äôt seem to find much, then don‚Äôt hesitate to talk to/email a Professor directly. Overall, taking initiative and showing enthusiasm for research opportunities can go a long way towards getting them!</p>

<p>Now, what should you do if there aren‚Äôt that many relevant/exciting research opportunities within your school‚Äôs CS department? If you‚Äôre a citizen or permanent resident of the US, the NSF funds a ‚ÄúResearch Experiences for Undergraduates‚Äù (REU) program with a bunch of exciting, paid research opportunities in a variety of different topics all across the world. You can find a list of these opportunities <a href="https://www.nsf.gov/crssprgm/reu/list_result.jsp?unitid=5049">here</a>. If this doesn‚Äôt apply to you, or none of these opportunities stand out to you, then I‚Äôd encourage you to try to find research opportunities through industry internships (e.g. an <a href="https://github.com/dangkhoasdc/awesome-ai-residency">AI Residency Program</a>), virtual mentorships from established researchers (e.g. <a href="https://blog.evjang.com/2020/06/free-office-hours-for-non-traditional.html">this one</a>) or try cold-emailing professors or graduate students at nearby institutions (<a href="https://www.mtu.edu/biological/research/undergraduate/pdfs/mentor-email-guidelines.pdf">here</a> are some generally helpful guidelines for writing such an email that‚Äôs likely to get a response). If none of that works and you still have the urge to do research, then go for it and forge your own path. Read papers, try to come up with an idea, and try working on it; this will certainly be difficult, but no one is stopping you. Plenty of people (like <a href="https://timdettmers.com/2020/03/10/how-to-pick-your-grad-school/">Tim Dettmers</a> or <a href="https://andreas-madsen.medium.com/becoming-an-independent-researcher-and-getting-published-in-iclr-with-spotlight-c93ef0b39b8b">Andreas Madsen</a>) have successfully pursued ‚Äúindependent‚Äù research (<a href="https://mlcollective.org/">there‚Äôs even an organization that helps foster this</a>!). Again, I‚Äôd highly recommend taking initiative and showing enthusiasm: these are often the most important traits of a researcher and will significantly improve your chances of independent success or getting noticed.</p>

<h2 id="4-some-tips-and-advice">4. <a name="Sometipsandadvice"></a>Some tips and advice</h2>
<p>Now that we‚Äôve covered the basics of what, why, and how, let me share some tips and advice that I‚Äôve gotten over the years and wish I‚Äôd known when I‚Äôd started doing undergrad research.</p>

<h3 id="41-some-dos-and-donts-of-undergrad-research">4.1. <a name="SomeDosandDontsofUndergradResearch"></a>Some Do‚Äôs and Dont‚Äôs of Undergrad Research</h3>
<p><strong>Do‚Äôs</strong></p>
<ol>
  <li>
    <p><strong>Work towards a paper</strong></p>

    <p>If you had to sum up a software engineer‚Äôs job in 3 words, ‚Äúproduce good code‚Äù would be a fairly apt description. If you had to do a similar thing for a researcher ‚Äúproduce good papers‚Äù would be it. Papers are the bread-and-butter of a researcher; pretty much all research projects aim to publish a paper in some capacity. Given this, if you want to get a true taste of what it‚Äôs like to be a researcher, you should work towards publishing a paper. Not doing so would be like trying to experience what it‚Äôs like to be a software engineer without writing any real code! By working towards a paper, you‚Äôll not only get a real sampling of what it‚Äôd be like to be a professional researcher, but you‚Äôll also have something tangible to show for it.</p>

    <p>Now, to be clear, I‚Äôm not suggesting that you should only work on projects where you‚Äôll be first-author on a paper that‚Äôs published at one of the top conferences or journals. I‚Äôm also not suggesting that you don‚Äôt work on projects whose outcome might <em>not</em> be a traditional conference or journal paper - producing things like technical reports, posters or even deep-dive blog posts can often be just as useful of a learning experience as a traditional paper. It also takes time to practice and develop the various skills that go into good research, and it‚Äôs a good idea to start out by doing a small, unpublished starter project, or working on an existing codebase, or by joining a project led by someone more experienced. However, if you want to experience what research is <em>really</em> like (which you should!), you need to be part of at least one project that eventually publishes a paper (or something with similar qualities like a technical report, deep-dive blog post, poster, etc.).</p>

    <p>If you work on any other project (a code release for an existing paper, setting up infrastructure for experimentation, etc.), even if it‚Äôs within a research lab, be well-aware that what you‚Äôre experiencing isn‚Äôt fully representative of the research process, and that the fact that you enjoy this project doesn‚Äôt mean you‚Äôd enjoy being a professional researcher.</p>
  </li>
  <li>
    <p><strong>Ask for help and advice frequently</strong></p>

    <p>Before I actually got involved with research, I imagined that researchers generally sat alone thinking about problems for long periods of time before having a ‚Äúeureka‚Äù moment and writing some crazy important paper (a la Isaac Newton). I chuckled when I wrote that last sentence because this is pretty far from the truth. Most research is extremely collaborative (notice how almost every paper you‚Äôll read has more than one author). Sure, it‚Äôs sometimes useful to sit and think about a problem alone, but there‚Äôs no point banging your head against it repeatedly when you‚Äôre stuck: it‚Äôs not useful to you or anyone you might be working with.</p>

    <p>Don‚Äôt be afraid to ask for help and collaborate with others when you think they can help you get unstuck; discussing problems and brainstorming ideas can be one of the most enjoyable parts of research (it certainly is for me!).</p>
  </li>
  <li>
    <p><strong>Set reasonable expectations with your advisor</strong></p>

    <p>Most undergrads feel the need to impress their advisor, especially when they first start out with research. As a result, it can be tempting to propose ridiculously hard-to-meet deadlines. Avoid doing this; the clearer you are about your time commitments, the easier it‚Äôll be for your advisor to set expectations, and the more likely you‚Äôll be to see your project through to completion instead of burning out and bowing out. Also, in general, it‚Äôs better to underpromise and overdeliver on deadlines than the other way around.</p>
  </li>
</ol>

<p><strong>Dont‚Äôs</strong></p>
<ol>
  <li>
    <p><strong>Flake</strong></p>

    <p>This is unfortunately one of the most-common thing that happens with undergraduate researchers (and why some labs are hesitant to take any at all!). Abandoning a research project suddenly and calling it quits is not only a letdown to the researchers you‚Äôre working with, but it also prevents you from getting a full taste of research and having something to show for it. Of course, if you truly can‚Äôt handle the workload, or actively hate what you‚Äôre working on, or aren‚Äôt getting enough time, help or guidance from the people you‚Äôre working with, then it can be a good idea to call it quits. However, undergrads often flake for simpler, more benign reasons: getting overwhelmed with other commitments and/or feeling stuck and not asking for help.</p>

    <p>Overall, I‚Äôd recommend that you stick with a research project to see it through, even if (more likely <em>when</em>) it gets difficult, annoying or uninteresting, because some of the best parts come <em>after</em> the worst ones. Also, sticking with a project will give you a true taste for the entire research process, and leave you with something to show for all your efforts at the end.</p>
  </li>
  <li>
    <p><strong>Feel too bad about not making much progress</strong></p>

    <p>Research is <em>hard</em>, and this is especially true when you‚Äôre just starting out. One of the things that makes it so hard is that research progress if often highly non-linear. It‚Äôs possible (and somewhat common) to make very little progress on a project despite putting in effort. Projects also fail entirely from time to time. In this way, research is very much unlike course work or personal projects, and often much more frustrating for undergrads used to relatively linear payouts for work put in.</p>

    <p>However, it‚Äôs important to realize this <em>isn‚Äôt</em> just happening to you: all researchers get stuck on problems and feel frustrated [4], but it <em>does</em> get better with time and experience. As an undergrad, you can try to mitigate the frustration that comes from a lack-of-progress by leaning on your mentors and collaborators more, focusing on what you can control (the time and effort you‚Äôre putting in), and even potentially joining multiple projects so that you can switch gears to another project whenever you‚Äôre feeling stuck. However, it‚Äôs also important to pay attention to your feelings: if you‚Äôre finding that you <em>really</em> don‚Äôt like the frustration of being stuck, and would much prefer to make more linear progress on your work, then that‚Äôs a strong and useful signal that you probably won‚Äôt be very happy as a researcher.</p>
  </li>
  <li>
    <p><strong>Assume a Professor‚Äôs research is just like that course you took with them</strong></p>

    <p>While Professors generally teach classes that are at least tangentially related to their research, this is not necessarily the case. Also, even if their research does cover the exact topic from a class you took with them, there is usually a big difference between learning material/doing class assignments and doing research. Try to do some of your own research on a lab‚Äôs recent work before trying to join it: skim some recent papers and maybe even go to a lab meeting (you‚Äôll usually be welcome!). If you‚Äôd like to get a taste for the research process, see if your Professor teaches a seminar or graduate class related to their research and see if you can enroll in it.</p>
  </li>
</ol>

<h3 id="42-some-important-things-to-keep-in-mind">4.2. <a name="SomeImportantThingstoKeepinMind"></a>Some Important Things to Keep in Mind</h3>
<ul>
  <li>
    <p><strong>It‚Äôs okay to feel like you don‚Äôt know what you‚Äôre doing</strong></p>

    <p>It‚Äôs easy to feel lost and overwhelmed when trying to do research, especially as an undergrad. This is okay. In fact, it‚Äôs normal and believe it or not, most senior researchers feel like they don‚Äôt know what they‚Äôre doing quite often. This isn‚Äôt too surprising when you really think about it: research <em>literally</em> involves straying beyond the boundaries of the field into the unknown. If you know exactly what you‚Äôre doing all the time, you‚Äôre probably not exploring far enough. One of the most significant and sobering things my undergrad research advisor told me is that the feeling of not knowing what you‚Äôre doing doesn‚Äôt really ever go away, even as a Professor. The best researchers learn to accept this and operate well despite not truly knowing how exactly things will pan out.</p>
  </li>
  <li>
    <p><strong>You‚Äôre probably not bothering/annoying them</strong></p>

    <p>Professors and grad students are often incredibly busy juggling a jaw-dropping number of tasks. As a result, it‚Äôs easy to feel like emailing them or asking for a meeting when you‚Äôre stuck/need help is bothersome and annoying. It‚Äôs usually not - especially if you‚Äôre blocked/stuck on something where a quick email/meeting could save you hours (and a significant amount of headache). That being said, it‚Äôs probably not a good idea to email out a cry for help for every problem you encounter without first trying to solve it. In general, a good rule of thumb is that you should have exhausted all the <em>reasonable</em> options you can think of for solving whatever problem you‚Äôre confronted with before asking for help. This will not only often help you resolve most problems/develop a better problem-solving intuition, but also will enable you to ask much better questions by describing what you‚Äôve already done and your thoughts on why they didn‚Äôt work. An email saying ‚ÄúStuck on <code class="highlighter-rouge">problem x</code> and have no clue what‚Äôs going on pls HALP!‚Äù is much less productive than one saying ‚ÄúI‚Äôve tried solution attempt <code class="highlighter-rouge">a, b, and c</code> to solve problem <code class="highlighter-rouge">x</code> and this is what happened in each of the cases, any thoughts on how to proceed?‚Äù. If you‚Äôre looking for more detailed guidelines on when and how to ask good questions, check out this <a href="https://stackoverflow.com/help/how-to-ask">StackOverflow post</a>.</p>
  </li>
  <li>
    <p><strong>You‚Äôre a valuable asset to your research group</strong></p>

    <p>As an undergrad, it‚Äôs easy to look at the incredibly smart and productive grad students and Professor(s) in your group and feel like your contributions aren‚Äôt particularly important or valuable to the group. While you might not be producing as much as a grad student or Professor, that certainly does not mean you aren‚Äôt valuable (if that were the case, then the group wouldn‚Äôt have hired you and wouldn‚Äôt be interested in keeping you around!). In fact, aside from their direct contributions to projects, undergrads can prove valuable in some non-obvious ways. For instance, having an interested undergrad ask basic questions about a project or paper can often force people who‚Äôve been working on the project for a while to rethink some fundamental assumptions and ultimately come up with better ideas (I‚Äôve seen this happen; never hesitate to ask basic questions!). Additionally, working with undergrads helps grad students/post-docs acquire valuable collaboration and mentorship skills, which are part of the reason they chose their jobs in the first place. All in all, your work and presence as an undergrad are often much more valuable than you realize.</p>
  </li>
  <li>
    <p><strong>Being an undergrad and doing research is hard: it‚Äôs okay to ask for extensions/take some time off.</strong></p>

    <p>Being an undergrad means having a significant course load <em>and</em> a bunch of external commitments to clubs, part-time jobs, etc. Doing research on top of all this is hard to say the least. There will be some weeks when all your commitments overwhelm you and make it hard to get much research work done. This is fine. Grad students and Professors understand this (all of them were once undergrads and many of them likely know what it‚Äôs like to be in your shoes) and are often more than willing to accommodate you if you need to push back some deadlines, etc. That being said, it‚Äôs useful to try to plan in advance, set reasonable deadlines and expectations for how much time you can commit to research in any given semester, and avoid over-promising.</p>
  </li>
  <li>
    <p><strong>Persistence goes a long way</strong></p>

    <p>Research is very much a skill and, like all other skills, takes time and practice to develop. Research also has a long learning curve: it‚Äôs difficult to ‚Äòteach‚Äô someone how to do good research with a couple lectures. Rather, ideas, concepts and a <a href="http://joschu.net/blog/opinionated-guide-ml-research.html">good taste for problems</a> tend to sink in with experience over time. So don‚Äôt be surprised if you feel like you‚Äôre not getting much better at research in the beginning. If you choose to stay at it, you‚Äôll find yourself improving slowly and rather unnoticeably to you, till some day you give a talk or mentor new undergrads yourself and realize how far you‚Äôve come.</p>
  </li>
</ul>

<hr />

<p>That‚Äôs it! Hopefully that‚Äôs enough to give you an idea of what undergrad research is, why you might want to get involved and how to actually do it, plus some tips and advice that I wish I‚Äôd been given when I started out. I hope some of this has been informative, and even convinced you to give undergrad research a try. Good luck - I can‚Äôt wait to hear about what you build :).</p>

<hr />

<p>[1] As an example, the only substantive guide to undergrad research I‚Äôve been able to find online is <a href="https://www.reddit.com/r/cscareerquestions/comments/cv8o3t/iama_cs_researcher_let_me_tell_you_about/">this Reddit AMA</a></p>

<p>[2] If you‚Äôre working on a starter project and get stuck, don‚Äôt hesitate to reach out to a lab member to ask for help! Contrary to what it might seem like, asking for help will usually be taken as a positive sign that you‚Äôre really interested in the work and excited to learn. Far too many undergrads give up after getting stuck on a starter project without even asking for help - so avoid this mistake if you can.</p>

<p>[3] See <a href="https://timdettmers.com/2018/11/26/phd-applications/">here</a>, <a href="https://da-data.blogspot.com/2015/03/reflecting-on-cs-graduate-admissions.html">here</a>, and <a href="http://www.cs.cmu.edu/~harchol/gradschooltalk.pdf">here</a>.</p>

<p>[4] <a href="https://www.bloomberg.com/news/videos/2017-12-01/the-godfather-of-ai-was-almost-a-carpenter-video">There‚Äôs a famous story</a> about how Geoffrey Hinton - a ‚Äúgodfather‚Äù of AI, inventor of Deep Learning and giant in the field of CS as a whole - got so frustrated with not being able to come to a satisfying understanding of how the brain works as an undergrad that he gave up on science and research entirely to become a carpenter for a year.</p>

<p>A huge thanks to <a href="https://dsam99.github.io/">Dylan Sam</a>, <a href="http://cs.brown.edu/people/rpatel59/">Roma Patel</a>, and <a href="https://qiuhongannawei.me/">Anna Wei</a> for providing comments and feedback on a draft of this post.</p>
:ET